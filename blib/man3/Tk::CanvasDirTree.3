.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.32
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Tk::CanvasDirTree 3"
.TH Tk::CanvasDirTree 3 "2006-04-05" "perl v5.8.8" "User Contributed Perl Documentation"
.SH "NAME"
Tk::CanvasDirTree \- Perl Derived Canvas widget for browsing Directory Trees
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Tk;
\&  use Tk::CanvasDirTree;
.Ve
.PP
.Vb 15
\&  my $ztree = $frame->Scrolled('CanvasDirTree',
\&            -bg =>'lightblue',
\&            -width =>300,
\&            -height =>300,
\&#           -backimage => 'bridget-5a.jpg',  #either a gif,jpg,or png file 
\&#           -backimage => $bunny,            #or Tk::Photo object data 
\&            -imx => 200,           # image position relative to nw corner 
\&            -imy => 10,            # to place nw corner of image 
\&            -font => 'big',        # defaults to system 
\&#           -fontcolorn => 'cyan', # defaults to black 
\&#           -fontcolora => 'lightseagreen', #defaults to red 
\&#           -indfilln => 'hotpink',         #defaults to blue    
\&#           -indfilla => 'orange',          #defaults to red 
\&            -scrollbars =>'osw',
\&            )->pack(-side=>'left',-fill=>'both', -expand=>1);
.Ve
.PP
#binding
 \f(CW$ztree\fR\->bind('<ButtonPress\-1>', sub{   
                 my \f(CW$selected\fR = \f(CW$ztree\fR\->\fIget_selected()\fR;
                 if(length \f(CW$selected\fR){print \*(L"$selected\en\*(R"}
		 });
.PP
#configuring
 \f(CW$ztree\fR\->configure('\-indfilla' => 'red' );
 \f(CW$ztree\fR\->configure('\-indfilln' => 'orange'); 
 \f(CW$ztree\fR\->configure('\-fontcolora' => 'white');
 \f(CW$ztree\fR\->configure('\-fontcolorn' => 'cyan'); 
 \f(CW$ztree\fR\->configure('\-bg' => 'black');     # gif, jpg, or png file
 \f(CW$ztree\fR\->configure('\-backimage' => \f(CW$tux\fR ); 
 \f(CW$ztree\fR\->configure('\-imy' => 45 ); 
 \f(CW$ztree\fR\->configure('\-imx' => 25 ); 
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This widget reads a directory tree, in an efficient manner, and provides
an intuitive graphical interface to selecting them. It only recurses 2 levels
at a time, so it is efficient on deeply nested trees. 
It is similar in appearance to the Gtk2 TreeView. Colors and fonts are
configurable, as well as a background image (with configurable location placement).
Due to the wide variety of possible color schemes, creating a pleasing 
background image is left to you. See the included scripts in the scripts
directory, for examples to make charcoal or faded backgrounds.
.PP
It is a single mouse click selector( I nevered liked double-click bindings :\-) ).
If a sub-directory has subdirs in it's own tree, a colored triangular shaped
indicator will be placed to the left of the subdir. Clicking on the indicator
will expand that subdir tree, and subsequent clicks will close it.
.PP
The basic operation is simple. A left mouse click on a subdirectory, will
return it's full path. You can then do what you want with the path, from 
your main script.
.PP
This widget is a derived Tk::Canvas, can be treated like a Canvas. 
It contains additional configuration options:
.PP
.Vb 9
\&    -backimage => 'bridget-5a.jpg',  # either a file 
\&    -backimage => $bunny,            # or Tk::Photo object data 
\&    -imx => 200,                     # image position relative to nw corner 
\&    -imy => 10,                      # to place nw corner of image 
\&    -font => 'big',                  # defaults to system 
\&    -fontcolorn => 'cyan',           # defaults to black 
\&    -fontcolora => 'lightseagreen',  # defaults to red 
\&    -indfilln => 'hotpink',          # defaults to blue    
\&    -indfilla => 'orange',           # defaults to red
.Ve
.Sh "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
See \*(L"perldoc Tk::Canvas\*(R" for the standard Canvas options
See perldoc Tk::Derived for information on how this module was derived.
.SH "AUTHOR"
.IX Header "AUTHOR"
zentara, <zentara@zentara.net>
See  http://zentara.net/perlplay  for other perl script examples.
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C)April 5, 2006 by Joseph B. Milosch a.k.a zentara
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.8.8 or,
at your option, any later version of Perl 5 you may have available.
